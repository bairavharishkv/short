package com.bairav.urlshortener.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;


import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name="url")
public class Url { //the url class is mapped to a table in the database by Hibernate
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name="id")
	private long id;  //primary key is automatically generated by mySql
	
	@Column(name="long_url")
	private String longUrl; //the long URL entered by the user
	

	//the unique-id of the short URL is stored in the database and is later concatenated with the rest of the short URL
	@Column(name="short_urlkey")
	private String shortUrlkey;  
								
	@Column(name="creation_date")
	private String create;  //the date and time the short URL is created
	
	@JsonIgnore
	@OneToMany(fetch= FetchType.LAZY, mappedBy= "url",
			cascade= {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH,
					CascadeType.REFRESH})
	private List<Statistics> statistics;  //the url table has a one-to-many relationship with the statistics table
	
	
	public Url() {
		
	}
	

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getLongUrl() {
		return longUrl;
	}

	public void setLongUrl(String longUrl) {
		this.longUrl = longUrl;
	}

	public String getShortUrlkey() {
		return shortUrlkey;
	}

	public void setShortUrlkey(String shortUrlkey) {
		this.shortUrlkey = shortUrlkey;
	}


	public String getCreate() {
		return create;
	}


	public void setCreate(String create) {
		this.create = create;
	}
	
	public List<Statistics> getStatistics() {
		forceGetStatistics();
		return statistics;
	}


	public void setStatistics(List<Statistics> statistics) {
		this.statistics = statistics;
	}


	//used during transaction to force-get the statistics
	public void forceGetStatistics() {
		
		if(statistics != null) {
			for(@SuppressWarnings("unused") Statistics item: statistics) {
				//loop through statistics to force-get each item
			}
		}
	}
}
